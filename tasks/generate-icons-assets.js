import { promises as fs } from 'fs';
import rawGlob from 'glob';
import path from 'path';
import SVGO from 'svgo';
import util from 'util';
import { pascalCase } from '../src/lib/change-case.js';

const glob = util.promisify(rawGlob);

async function run() {
  await buildIcons({
    namespace: 'clever',
    glob: 'src/assets/**/*.svg',
    svgoPlugins: [{ removeViewBox: false }, { removeDimensions: true }],
    outputFile: 'src/assets/cc-clever.icons.js',
  });

  await buildIcons({
    namespace: 'remix',
    glob: 'node_modules/remixicon/icons/**/*.svg',
    svgoPlugins: [{ removeViewBox: false }, { removeDimensions: true }],
    outputFile: 'src/assets/cc-remix.icons.js',
  });
}

/**
 * @param {object} config config defining icons to be built
 * @param {string} config.namespace icon namespace
 * @param {string} config.glob icon files glob
 * @param {array<object>|null} config.svgoPlugins plugins to pass to SVGO
 * @param {string} config.outputFile output file path
 * @returns {Promise<string>}
 */
async function buildIcons(config) {
  const lines = [
    '/* eslint-disable camelcase */',
    '',
    '// NOTE: This file is autogenerated. Do not modify.',
    '// See clever-components/tasks/generate-icons-assets.js for script used.',
    '',
  ];

  const startTime = process.hrtime();
  console.log(`Generating '${config.namespace}' icon set...`);

  const iconPaths = await glob(config.glob);
  for (const iconPath of iconPaths) {
    // retrieve filename from path
    const filename = path.basename(iconPath, '.svg');

    // build module variable name from the icon filename and namespace
    const variableName = `icon${pascalCase(config.namespace)}${pascalCase(filename)}`;

    // load icon file (svg expected) and optimize with SVGO
    const svgContent = await getSvgContentFromPath(iconPath, config.svgoPlugins);

    // append ES module generated string
    lines.push(`export const ${variableName} = { content: '${svgContent}' };`);
  }
  lines.push('');

  await fs.writeFile(config.outputFile, lines.join('\n'));

  const elapsedTime = process.hrtime(startTime);
  const durationInSeconds = (elapsedTime[0] + elapsedTime[1] / 1e9).toFixed(2);
  console.log(
    `Icon set '${config.namespace}' successfully generated into ${config.outputFile}! (in ${durationInSeconds}s)`,
  );
}

/**
 * @param {string} svgPath path to an SVG file
 * @param {array<object>|null} svgoPlugins plugins to pass to SVGO
 * @returns {Promise<string>} SVG file content
 */
async function getSvgContentFromPath(svgPath, svgoPlugins) {
  const rawSvg = await fs.readFile(svgPath, 'utf8');
  const plugins = svgoPlugins ?? [];
  const svgo = await new SVGO({ plugins }).optimize(rawSvg, { plugins });
  return svgo.data;
}

run().catch((e) => {
  console.error(e);
  process.exit(1);
});
