import{s as e}from"./i18n-sanitize-4edc4a2d.js";import"./cc-tcp-redirection-form-f21a973d.js";import"./cc-smart-container-f668ab58.js";import{d as a,e as n,r as t}from"./application-e1aa8d7f.js";import{c as o}from"./organisation-44bfc0df.js";import{d as r}from"./request.fetch-17efde15.js";import{b as s,a as p}from"./notifications-1d2a2395.js";import{s as c}from"./send-to-api-3f46dae0.js";const i=["default","cleverapps"];r({selector:"cc-tcp-redirection-form",params:{apiConfig:{type:Object},ownerId:{type:String},appId:{type:String}},onContextUpdate({container:r,component:d,context:m,onEvent:f,updateComponent:g,signal:l}){const{apiConfig:u,ownerId:I,appId:C}=m;function y(e,a){g("state",(n=>{const t=n.redirections.find((a=>a.namespace===e));null!=t&&a(t)}))}f("cc-tcp-redirection:create",(({namespace:a})=>{y(a,(e=>{e.type="waiting"})),async function({apiConfig:e,ownerId:a,appId:t,namespace:o}){return n({id:a,appId:t,payment:"accepted"},{namespace:o}).then(c({apiConfig:e}))}({apiConfig:u,ownerId:I,appId:C,namespace:a}).then((({port:n})=>{s((({namespace:a})=>e`La redirection TCP dans l'espace de nommage <strong>${a}</strong> a été créée avec succès.`)({namespace:a})),y(a,(e=>{e.type="loaded",e.sourcePort=n}))})).catch((n=>{console.error(n),p((({namespace:a})=>e`Une erreur est survenue pendant la création d'une redirection TCP dans l'espace de nommage <strong>${a}</strong>.`)({namespace:a})),y(a,(e=>{e.type="loaded"}))}))})),f("cc-tcp-redirection:delete",(({namespace:a,sourcePort:n})=>{y(a,(e=>{e.type="waiting"})),async function({apiConfig:e,ownerId:a,appId:n,sourcePort:o,namespace:r}){return t({id:a,appId:n,sourcePort:o,namespace:r}).then(c({apiConfig:e}))}({apiConfig:u,ownerId:I,appId:C,sourcePort:n,namespace:a}).then((()=>{s((({namespace:a})=>e`La redirection TCP dans l'espace de nommage <strong>${a}</strong> a été supprimée avec succès.`)({namespace:a})),y(a,(e=>{e.type="loaded",e.sourcePort=null}))})).catch((n=>{console.error(n),p((({namespace:a})=>e`Une erreur est survenue pendant la suppression de la redirection TCP dans l'espace de nommage <strong>${a}</strong>.`)({namespace:a})),y(a,(e=>{e.type="loaded"}))}))})),g("state",{type:"loading"}),async function({apiConfig:e,signal:n,ownerId:t,appId:r}){return Promise.all([o({id:t}).then(c({apiConfig:e,signal:n})),a({id:t,appId:r}).then(c({apiConfig:e,signal:n}))]).then((([e,a])=>e.map((({namespace:e})=>{const n=a.find((a=>a.namespace===e))?.port,t=!i.includes(e);return{namespace:e,sourcePort:n,isPrivate:t}}))))}({apiConfig:u,ownerId:I,appId:C,signal:l}).then((e=>{g("state",{type:"loaded",redirections:e.map((e=>({type:"loaded",...e})))})})).catch((e=>{console.error(e),g("state",{type:"error"})}))}});
